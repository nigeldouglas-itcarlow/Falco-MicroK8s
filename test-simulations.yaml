# Privileged Pod (K01.01) & Resource Limits (K0.04)
apiVersion: v1
kind: Pod
metadata:
  name: privileged-pod
  namespace: default
  labels:
    app: my-privileged-pod
    environment: microk8s
spec:
  containers:
  - name: centos
    image: centos
    command: ['sh', '-c', 'sleep 999']
    #securityContext explicitly defined
    securityContext:
       privileged: true
---
# Read-only FileSystem Pod (K01.02)
apiVersion: v1
kind: Pod
metadata:
  name: read-only-fs-pod
spec:
  containers:
  - name: centos
    image: centos
    command: ['sh', '-c', 'sleep 999']
    securityContext:
      #read-only fs explicitly defined
      readOnlyRootFilesystem: true
---
# Run as Root User (K01.03)
apiVersion: v1
kind: Pod
metadata:
  name: root-user-pod
spec:
  containers:
  - name: root-container
    image: ubuntu
    command: ["sleep", "3600"]
    securityContext:
      runAsUser: 0  # This specifies that the container runs as root
---
# Excessive use of cluster-admin role (K03.01)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: redacted-rbac
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Broken Authentication (K06)
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-auth-config
  namespace: kube-system
data:
  users: |
    - name: myuser
      user:
        client-certificate-data: SGVsbG8gV29ybGQhCg==
        client-key-data: V2h5IG5lZWQgdG8gYmUgc3RyaW5nIQo=
---
# Network Segmentation (K07)
apiVersion: v1
kind: Namespace
metadata:
  name: network-ns
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all
  namespace: network-ns
spec:
  podSelector: {}
  ingress:
    - {}
  egress:
    - {}
---
# Container Breakout 1-Liner (K04.01)
apiVersion: v1
kind: Pod
metadata:
  name: r00t
spec:
  restartPolicy: Never
  containers:
  - name: container-1
    image: alpine
    command:
    - nsenter
    - "--mount=/proc/1/ns/mnt"
    - --
    - /bin/bash
    stdin: true
    tty: true
    imagePullPolicy: IfNotPresent
    securityContext:
      privileged: true
---
# Network Segmentation - Proposed Insecure Ingress without TLS certificate (K07.04)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: secure-ingress
spec:
  tls:
    - hosts:
        - example.com  # Replace with your domain
      secretName: tls-secret  # Replace with the name of your TLS secret
  rules:
    - host: example.com  # Replace with your domain
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: your-service-name  # Replace with your backend service name
                port:
                  number: 80  # Replace with your service port number
---
# Broken Authentication: Mounts of sensitive external host paths within pods (K06.04)
apiVersion: v1
kind: Pod
metadata:
  name: sensitive-mount-pod
spec:
  containers:
  - name: my-container
    image: nginx
    volumeMounts:
    - name: host-root
      mountPath: /host-root  # This path should be sensitive and restricted
  volumes:
  - name: host-root
    hostPath:
      path: /
